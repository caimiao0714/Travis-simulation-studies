csd <- lx * var(x) + ly * var(y)
csd <- csd/(lx + ly)
csd <- sqrt(csd)                     ## common sd computation
cd  <- md/csd                        ## cohen's d
}
> res <- cohens_d(x, y)
> res
res <- cohens_d(x, y)
res
cohen.d(x, y)
matcheddata1$y[matcheddata1$tr == 0]
cohen.d(matcheddata1$y[matcheddata1$tr == 0], matcheddata1$y[matcheddata1$tr == 1], paired = TRUE)
system2('pandoc-citeproc', '--version')
system2('pandoc-citeproc', '--version')
system2('pandoc-citeproc', '--version')
x <- cohen.d(matcheddata1$y[matcheddata1$tr == 0],
matcheddata1$y[matcheddata1$tr == 1],
paired = TRUE)
x
x <- cohen.d(matcheddata1$y[matcheddata1$tr == 1],
matcheddata1$y[matcheddata1$tr == 0],
paired = TRUE)
cohen.d(matcheddata1$y[matcheddata1$tr == 1],
matcheddata1$y[matcheddata1$tr == 0],
paired = TRUE)$estimate
dat[,paste("X", 1:9, sep = "")]
pca3 <- prcomp(dat[,paste("X", 1:9, sep = "")], scale = FALSE)
str(pca3)
pca3 <- prcomp(dat[,paste("X", 1:9, sep = "")], scale = FALSE)
pca3data <- data.frame(
data3$y,
data3$tr,
pca3$x[,1:3]
)#extract the  three PCs, y and tr
data3 <- rbind(dat[dat$tr == 0,],
dat[sample(which(dat$tr == 1), 100),])
# principal component analysis
pca3 <- prcomp(dat[,paste("X", 1:9, sep = "")], scale = FALSE)
pca3data <- data.frame(
data3$y,
data3$tr,
pca3$x[,1:3]
)#extract the  three PCs, y and tr
pca3 <- prcomp(dat[,paste("X", 1:9, sep = "")], scale = FALSE)
data3
pca3$x[,1:3]
pca3data <- data.frame(
data3$y,
data3$tr,
pca3$x[,1:3]
)#extract the  three PCs, y and tr
length(data3$y)
str(pca3$x[,1:3])
pca3 <- prcomp(data3[,paste("X", 1:9, sep = "")], scale = FALSE)
pca3data <- data.frame(
data3$y,
data3$tr,
pca3$x[,1:3]
)#extract the  three PCs, y and tr
View(pca3data)
library(MASS)
library(Matrix)
library(GMCM)
library(MatchIt)
# correlations
r1 = 0.3
r2 = 0.5
r3 = 0.8
# block diagnoal correlation matrix
m1 = matrix(r1, nrow=3, ncol=3)
diag(m1) = 1
m2 = matrix(r2, nrow=3, ncol=3)
diag(m2) = 1
m3 = matrix(r3, nrow=3, ncol=3)
diag(m3) = 1
cmat = bdiag(m1, m2, m3)
# covariates
x = data.frame(mvrnorm(n=1000, mu=rep(0,9), Sigma=cmat))
# pt: the probability to draw the binary treatment
pt = GMCM:::inv.logit(rowSums(x))
# tr: treatment
tr = rbinom(n = 1000, size = 1, prob = pt)
# y
y = rnorm(n = 1000,
mean = tr * 3 + 3*x$X1 + 2*x$X2 + x$X3 + 3*x$X4 + 2*x$X5 + x$X6 + 3*x$X7 + 2*x$X8 + x$X9,
sd = 1)
# constructing the data.frame
dat <- data.frame(x, tr, y)
library(MASS)
library(Matrix)
library(GMCM)
library(MatchIt)
# correlations
r1 = 0.3
r2 = 0.5
r3 = 0.8
# block diagnoal correlation matrix
m1 = matrix(r1, nrow=3, ncol=3)
diag(m1) = 1
m2 = matrix(r2, nrow=3, ncol=3)
diag(m2) = 1
m3 = matrix(r3, nrow=3, ncol=3)
diag(m3) = 1
cmat = bdiag(m1, m2, m3)
# covariates
x = data.frame(mvrnorm(n=1000, mu=rep(0,9), Sigma=cmat))
# pt: the probability to draw the binary treatment
pt = GMCM:::inv.logit(rowSums(x))
# tr: treatment
tr = rbinom(n = 1000, size = 1, prob = pt)
# y
y = rnorm(n = 1000,
mean = tr * 3 + 3*x$X1 + 2*x$X2 + x$X3 + 3*x$X4 + 2*x$X5 + x$X6 + 3*x$X7 + 2*x$X8 + x$X9,
sd = 1)
# constructing the data.frame
dat <- data.frame(x, tr, y)
#1 select all comparison cases and randomly select 100 treatment cases and all the comparison group cases
data4 <- rbind(dat[dat$tr == 0,],
dat[sample(which(dat$tr == 1), 100),])
#2 principal component analysis - set 1
pca4.1 <- prcomp(data4[,paste("X", 1:3, sep = "")], scale = FALSE)
pca4.2 <- prcomp(data4[,paste("X", 4:6, sep = "")], scale = FALSE)
pca4.3 <- prcomp(data4[,paste("X", 7:9, sep = "")], scale = FALSE)
pca4data <- data.frame(
data4$y,
data4$tr,
pca4.1$x[,1]
pca4.2$x[,1]
pca4.3$x[,1]
)#extract the  three PCs, y and tr
names(pca4data) <- c("y", "tr", "PC1", "PC2", "PC3")
#3 propensity score matching - one to one match
matcheddata4 <- match.data(
matchit(tr ~ PC1 + PC2 + PC3,
data = pca4data,
method = "nearest",
ratio = 1))
#4.1 linear regression - y and treatment
lm4.1 <- lm(y ~ tr, data = matcheddata4)
knitr::kable(
summary(lm4.1)$coefficients,
caption = 'Linear regression between y and treatment',
digits = 2
)
#4.2 linear regression - yï¼Œ treatment and covariates
lm4.2 <- lm(y ~ tr + PC1 + PC2 + PC3,
data = matcheddata4)
knitr::kable(
summary(lm4.2)$coefficients,
caption = 'Linear regression between y ,treatment and 3 PCs',
digits = 2
)
#5 Cohen's d
cohen.d(matcheddata4$y[matcheddata4$tr == 1],
matcheddata4$y[matcheddata4$tr == 0],
paired = TRUE)$estimate
Sys.dat()
Sys.Date()
# Creating simulation data
Random variables $X_1$ - $X_3$ have the correlation coefficient of 0.3; random variables $X_4$ - $X_6$ have the correlation coefficient of 0.5; random variables $X_7$ - $X_9$ have the correlation coefficient of 0.8. The true population parameters for $X_1, X_4, X_7$ is 2, parameters for $X_2, X_5, X_8$ is 3, parameters for $X_3, X_6, X_9$ is 1.
m1 = matrix(r1, nrow=3, ncol=3)
diag(m1) = 1
m2 = matrix(r2, nrow=3, ncol=3)
diag(m2) = 1
m3 = matrix(r3, nrow=3, ncol=3)
diag(m3) = 1
r1 = 0.3
r2 = 0.5
r3 = 0.8
# block diagnoal correlation matrix
m1 = matrix(r1, nrow=3, ncol=3)
diag(m1) = 1
m2 = matrix(r2, nrow=3, ncol=3)
diag(m2) = 1
m3 = matrix(r3, nrow=3, ncol=3)
diag(m3) = 1
bdiag(m1, m2, m3)
library(MASS)
library(Matrix)
library(GMCM)
library(MatchIt)
bdiag(m1, m2, m3)
m1
x = data.frame(mvrnorm(n=1000, mu=rep(0,9), Sigma=cmat))
cmat = bdiag(m1, m2, m3)
# covariates
x = data.frame(mvrnorm(n=1000, mu=rep(0,9), Sigma=cmat))
pt = GMCM:::inv.logit(rowSums(x))
View(x)
rowSums(x)
library(MASS)
library(Matrix)
library(GMCM)
library(MatchIt)
# correlations
r1 = 0.3
r2 = 0.5
r3 = 0.8
# block diagnoal correlation matrix
m1 = matrix(r1, nrow=3, ncol=3)
diag(m1) = 1
m2 = matrix(r2, nrow=3, ncol=3)
diag(m2) = 1
m3 = matrix(r3, nrow=3, ncol=3)
diag(m3) = 1
cmat = bdiag(m1, m2, m3)
# covariates
x = data.frame(mvrnorm(n=1000, mu=rep(0,9), Sigma=cmat))
View(x)
mi
m1
rowSums(x)
GMCM:::inv.logit(rowSums(x))
round(GMCM:::inv.logit(rowSums(x)), 3)
pt = GMCM:::inv.logit(rowSums(x)-0.5)
mean(pt)
pt = GMCM:::inv.logit(rowSums(x-0.5))
mean(pt)
pt = GMCM:::inv.logit(rowSums(x)-1)
mean(pt)
pt = GMCM:::inv.logit(rowSums(x)-2)
mean(pt)
pt = GMCM:::inv.logit(rowSums(x)-2.5)
mean(pt)
pt = GMCM:::inv.logit(rowSums(x)-3)
mean(pt)
pt
round(pt, 3)
pt = GMCM:::inv.logit(rowSums(x)-3.5)
mean(pt)
pt = GMCM:::inv.logit(rowSums(x)-4)
mean(pt)
pt = GMCM:::inv.logit(rowSums(x)-3.8)
mean(pt)
library(MASS)
library(Matrix)
library(GMCM)
library(MatchIt)
# correlations
r1 = 0.3
r2 = 0.5
r3 = 0.8
# block diagnoal correlation matrix
m1 = matrix(r1, nrow=3, ncol=3)
diag(m1) = 1
m2 = matrix(r2, nrow=3, ncol=3)
diag(m2) = 1
m3 = matrix(r3, nrow=3, ncol=3)
diag(m3) = 1
cmat = bdiag(m1, m2, m3)
# covariates
x = data.frame(mvrnorm(n=1000, mu=rep(0,9), Sigma=cmat))
# pt: the probability to draw the binary treatment
pt = GMCM:::inv.logit(rowSums(x)-3.8)##REVISE: rowSums(x)-3.8 to reduce proportion treated
mean(pt) ## REVISE: to confirm that mean(pt) is near 0.2
# tr: treatment
tr = rbinom(n = 1000, size = 1, prob = pt)
# y: outcome - POPULATION PARAMETER for treatment is 3
y = rnorm(n = 1000,
mean = tr * 3 + 3*x$X1 + 2*x$X2 + x$X3 + 3*x$X4 + 2*x$X5 + x$X6 + 3*x$X7 + 2*x$X8 + x$X9,
sd = 1)
# constructing the data.frame
dat <- data.frame(x, tr, y)
View(dat)
table(dat$tr)
cohen.d(matcheddata1$y[matcheddata1$tr == 1],
matcheddata1$y[matcheddata1$tr == 0],
paired = TRUE)$estimate
library(effsize)
cohen.d(matcheddata1$y[matcheddata1$tr == 1],
matcheddata1$y[matcheddata1$tr == 0],
paired = TRUE)$estimate
2^10
2^20
library(effsize)
lm1.1.1 <- lm(y ~ tr, data = dat)
# summary the output
knitr::kable(
summary(lm1.1)$coefficients,
caption = 'Linear regression between y and treatment on unmatched data',
digits = 2
)
# get the Cohen's d for this model
cohen.d(matcheddata1$y[matcheddata1$tr == 1],
matcheddata1$y[matcheddata1$tr == 0],
paired = FALSE)$estimate
library(effsize)
lm1.1.1 <- lm(y ~ tr, data = dat)
# summary the output
knitr::kable(
summary(lm1.1.1)$coefficients,
caption = 'Linear regression between y and treatment on unmatched data',
digits = 2
)
# get the Cohen's d for this model
cohen.d(dat$y[dat$tr == 1],
dat$y[dat$tr == 0],
paired = FALSE)$estimate
lm1.1.2 <- lm(y ~ tr + X1 + X2 + X3 + X4 + X5 + X6 + X7 + X8 + X9,
data = dat)
# summary the output
knitr::kable(
summary(lm1.1.2)$coefficients,
caption = 'Linear regression between y and treatment, \n9 covariates on unmatched data',
digits = 2
)
# get the Cohen's d for this model
cohen.d(dat$y[dat$tr == 1],
dat$y[dat$tr == 0],
paired = FALSE)$estimate
?cohen.d
lm1.1.2 <- lm(y ~ tr + X1 + X2 + X3 + X4 + X5 + X6 + X7 + X8 + X9,
data = dat)
# summary the output
knitr::kable(
summary(lm1.1.2)$coefficients,
caption = 'Linear regression between y and treatment, 9 covariates on unmatched data',
digits = 3
)
# get the Cohen's d for this model
cohen.d(dat$y[dat$tr == 1],
dat$y[dat$tr == 0],
paired = FALSE)$estimate
#1 match the treatment and comparison groups - 1 to 1 match
matcheddata1 <- match.data(
matchit(tr ~ X1 + X2 + X3 + X4 + X5 + X6 + X7 + X8 + X9,
data = dat,
method = "nearest",
ratio = 1))
#2 linear regression - y and treatment on matched data
lm1.2.1 <- lm(y ~ tr, data = matcheddata1)
knitr::kable(
summary(lm1.1)$coefficients,
caption = 'Linear regression between y and treatment on matched data',
digits = 2
)
cohen.d(matcheddata1$y[matcheddata1$tr == 1],
matcheddata1$y[matcheddata1$tr == 0],
paired = TRUE)$estimate
#1 match the treatment and comparison groups - 1 to 1 match
matcheddata1 <- match.data(
matchit(tr ~ X1 + X2 + X3 + X4 + X5 + X6 + X7 + X8 + X9,
data = dat,
method = "nearest",
ratio = 1))
#2 linear regression - y and treatment on matched data
lm1.2.1 <- lm(y ~ tr, data = matcheddata1)
knitr::kable(
summary(lm1.2.1)$coefficients,
caption = 'Linear regression between y and treatment on matched data',
digits = 2
)
cohen.d(matcheddata1$y[matcheddata1$tr == 1],
matcheddata1$y[matcheddata1$tr == 0],
paired = TRUE)$estimate
cohen.d(matcheddata1$y[matcheddata1$tr == 1],
matcheddata1$y[matcheddata1$tr == 0],
paired = FALSE)$estimate
#3.2 linear regression - y, treatment and covariates
lm1.2.2 <- lm(y ~ tr + X1 + X2 + X3 + X4 + X5 + X6 + X7 + X8 + X9,
data = matcheddata1)
knitr::kable(
summary(lm1.2.2)$coefficients,
caption = 'Linear regression between y ,treatment and 9 covariates',
digits = 2
)
#4 effect size - Cohen's d
cohen.d(matcheddata1$y[matcheddata1$tr == 1],
matcheddata1$y[matcheddata1$tr == 0],
paired = FALSE)$estimate
library(effsize)
?cohen.d
library(MASS)
library(Matrix)
library(GMCM)
library(MatchIt)
set.seed(666)
# correlations
r1 = 0.3
r2 = 0.5
r3 = 0.8
# block diagnoal correlation matrix
m1 = matrix(r1, nrow=3, ncol=3)
diag(m1) = 1
m2 = matrix(r2, nrow=3, ncol=3)
diag(m2) = 1
m3 = matrix(r3, nrow=3, ncol=3)
diag(m3) = 1
cmat = bdiag(m1, m2, m3)
# covariates
x = data.frame(mvrnorm(n=1000, mu=rep(0,9), Sigma=cmat))
# pt: the probability to draw the binary treatment
##REVISED: rowSums(x)-3.8 to reduce proportion treated
pt = GMCM:::inv.logit(rowSums(x)-3.8)
## REVISED: to confirm that mean(pt) is near 0.2
mean(pt)
# mean(pt) is around 0.2 to make sure there are sufficient
# number of comparison groups to choose from.
# tr: treatment
tr = rbinom(n = 1000, size = 1, prob = pt)
# y: outcome - POPULATION PARAMETER for treatment is 3
y = rnorm(n = 1000,
mean = tr * 3 + 3*x$X1 + 2*x$X2 + x$X3 + 3*x$X4 + 2*x$X5 + x$X6 + 3*x$X7 + 2*x$X8 + x$X9,
sd = 1)
# constructing the data.frame
dat <- data.frame(x, tr, y)
lm1.1.1 <- lm(y ~ tr, data = dat)
cohen.d(dat$y, dat$tr == 0)$estimate
cohen.d(dat$y, dat$tr)$estimate
cohen.d(dat$y[dat$tr == 1],
dat$y[dat$tr == 0],
paired = FALSE)$estimate
?cohen.d
cohen.d(d = dat$y, f = dat$tr)$estimate
cohen.d(d = dat$y, f = dat$tr)
cohen.d(dat$y[dat$tr == 1],
dat$y[dat$tr == 0],
paired = FALSE)
cohen.d(d = dat$y, f = as.factor(dat$tr))
cohen.d(d = dat$y, f = as.factor(dat$tr))$estimate
cohen.d(dat$y,as.factor(dat$tr))$estimate
cohen.d(dat$X1,as.factor(dat$tr))$estimate
cohen.d(dat$X2,as.factor(dat$tr))$estimate
cohen.d(dat$X3,as.factor(dat$tr))$estimate
cohen.d(dat$X4,as.factor(dat$tr))$estimate
cohen.d(dat$X5,as.factor(dat$tr))$estimate
cohen.d(dat$X6,as.factor(dat$tr))$estimate
cohen.d(dat$X7,as.factor(dat$tr))$estimate
cohen.d(dat$X8,as.factor(dat$tr))$estimate
cohen.d(dat$X9,as.factor(dat$tr))$estimate
-cohen.d(dat$X1,as.factor(dat$tr))$estimate
-cohen.d(dat$X2,as.factor(dat$tr))$estimate
-cohen.d(dat$X3,as.factor(dat$tr))$estimate
source('~/.active-rstudio-document', encoding = 'UTF-8', echo=TRUE)
browseVignettes(dplyr)
browseVignettes("dplyr")
browseVignettes("tidyr")
install.packages("ldr")
set.seed(1810)
library(ldr)
data("snake", package = "ldr")
data("snakes", package = "ldr")
str(snakes)
fit <- ldr(Sigmas = snakes[-3], ns = snakes[[3]], numdir = 4,
model = "core", numdir.test = TRUE, verbose = TRUE, sim_anneal = TRUE,
max_iter = 100, max_iter_sa = 100)
summary(fit)
snakes[-3]
snakes[[3]]
fit$Gammahat[[3]]
Gammahat <- fit$Gammahat[[3]]
Sigmahat1 <- fit$Sigmashat[[3]][[1]]
Sigmahat2 <- fit$Sigmashat[[3]][[2]]
Mhat1 <- t(Gammahat) %*% Sigmahat1 %*% Gammahat
Mhat2 <- t(Gammahat) %*% Sigmahat2 %*% Gammahat
Mhat1
Mhat2
Gammahat
Sigmahat1
Sigmahat2
knitr::opts_chunk$set(echo = TRUE)
library(MASS)
library(Matrix)
library(GMCM)
library(MatchIt)
set.seed(666)
# correlations
r1 = 0.3
r2 = 0.5
r3 = 0.8
# block diagnoal correlation matrix
m1 = matrix(r1, nrow=3, ncol=3)
diag(m1) = 1
m2 = matrix(r2, nrow=3, ncol=3)
diag(m2) = 1
m3 = matrix(r3, nrow=3, ncol=3)
diag(m3) = 1
cmat = bdiag(m1, m2, m3)
# covariates
x = data.frame(mvrnorm(n=1000, mu=rep(0,9), Sigma=cmat))
# pt: the probability to draw the binary treatment
##REVISED: rowSums(x)-3.8 to reduce proportion treated
pt = GMCM:::inv.logit(rowSums(x)-3.8)
## REVISED: to confirm that mean(pt) is near 0.2
mean(pt)
# mean(pt) is around 0.2 to make sure there are sufficient
# number of comparison groups to choose from.
# tr: treatment
tr = rbinom(n = 1000, size = 1, prob = pt)
# y: outcome - POPULATION PARAMETER for treatment is 3
y = rnorm(n = 1000,
mean = tr * 3 + 3*x$X1 + 2*x$X2 + x$X3 + 3*x$X4 + 2*x$X5 + x$X6 + 3*x$X7 + 2*x$X8 + x$X9,
sd = 1)
# constructing the data.frame
dat <- data.frame(x, tr, y)
# Summary Table of the above information
Statistics | No matching | Nine Covariates | Seven Covariates($X_1$ - $X_7$) | Five Covariates\n($X_1$ - $X_4$, $X_7$) | Three Covariates\n($X_1$, $X_4$, $X_7$) | 3 PCs\n(1 decomp) | 3 PCs\n(3 decomp)
:----------------:|:-----------:|:-----------:|:------------:|:-----------:|:-------------:|:-----------
y ~ tr + covariates, tr coefficient (pre-match)|`r unname(lm1.1.2$coefficients[which(labels(lm1.1.2$coefficients)== "tr")])` | `r unname(lm1.1.2$coefficients[which(labels(lm1.1.2$coefficients)== "tr")])`| `r unname(lm2.1.1$coefficients[which(labels(lm2.1.1$coefficients)== "tr")])`| `r unname(lm3.1.1$coefficients[which(labels(lm3.1.1$coefficients)== "tr")])`| `r unname(lm4.1.1$coefficients[which(labels(lm4.1.1$coefficients)== "tr")])` | `r unname(lm5.1.2$coefficients[which(labels(lm5.1.2$coefficients)== "tr")])` | `r unname(lm6.1.2$coefficients[which(labels(lm6.1.2$coefficients)== "tr")])`
cohen's d, x1 ~ tr|`r unname(cohen.d(dat$X1,factor(dat$tr, levels = c(0, 1)))$estimate)`|`r unname(cohen.d(matcheddata1$X1,factor(matcheddata1$tr, levels = c(0, 1)))$estimate)`|`r unname(cohen.d(matcheddata2$X1,factor(matcheddata2$tr, levels = c(0, 1)))$estimate)`|`r unname(cohen.d(matcheddata3$X1,factor(matcheddata3$tr, levels = c(0, 1)))$estimate)`|`r unname(cohen.d(matcheddata4$X1,factor(matcheddata4$tr, levels = c(0, 1)))$estimate)`|`r unname(cohen.d(matcheddata5$X1,factor(matcheddata5$tr, levels = c(0, 1)))$estimate)`|`r unname(cohen.d(matcheddata6$X1,factor(matcheddata6$tr, levels = c(0, 1)))$estimate)`
cohen's d, x2 ~ tr|`r unname(cohen.d(dat$X2,factor(dat$tr, levels = c(0, 1)))$estimate)`|`r unname(cohen.d(matcheddata1$X2,factor(matcheddata1$tr, levels = c(0, 1)))$estimate)`|`r unname(cohen.d(matcheddata2$X2,factor(matcheddata2$tr, levels = c(0, 1)))$estimate)`|`r unname(cohen.d(matcheddata3$X2,factor(matcheddata3$tr, levels = c(0, 1)))$estimate)`|`r unname(cohen.d(matcheddata4$X2,factor(matcheddata4$tr, levels = c(0, 1)))$estimate)`|`r unname(cohen.d(matcheddata5$X2,factor(matcheddata5$tr, levels = c(0, 1)))$estimate)`|`r unname(cohen.d(matcheddata6$X2,factor(matcheddata6$tr, levels = c(0, 1)))$estimate)`
cohen's d, x3 ~ tr|`r unname(cohen.d(dat$X3,factor(dat$tr, levels = c(0, 1)))$estimate)`|`r unname(cohen.d(matcheddata1$X3,factor(matcheddata1$tr, levels = c(0, 1)))$estimate)`|`r unname(cohen.d(matcheddata2$X3,factor(matcheddata2$tr, levels = c(0, 1)))$estimate)`|`r unname(cohen.d(matcheddata3$X3,factor(matcheddata3$tr, levels = c(0, 1)))$estimate)`|`r unname(cohen.d(matcheddata4$X3,factor(matcheddata4$tr, levels = c(0, 1)))$estimate)`|`r unname(cohen.d(matcheddata5$X3,factor(matcheddata5$tr, levels = c(0, 1)))$estimate)`|`r unname(cohen.d(matcheddata6$X3,factor(matcheddata6$tr, levels = c(0, 1)))$estimate)`
cohen's d, x4 ~ tr|`r unname(cohen.d(dat$X4,factor(dat$tr, levels = c(0, 1)))$estimate)`|`r unname(cohen.d(matcheddata1$X4,factor(matcheddata1$tr, levels = c(0, 1)))$estimate)`|`r unname(cohen.d(matcheddata2$X4,factor(matcheddata2$tr, levels = c(0, 1)))$estimate)`|`r unname(cohen.d(matcheddata3$X4,factor(matcheddata3$tr, levels = c(0, 1)))$estimate)`|`r unname(cohen.d(matcheddata4$X4,factor(matcheddata4$tr, levels = c(0, 1)))$estimate)`|`r unname(cohen.d(matcheddata5$X4,factor(matcheddata5$tr, levels = c(0, 1)))$estimate)`|`r unname(cohen.d(matcheddata6$X4,factor(matcheddata6$tr, levels = c(0, 1)))$estimate)`
cohen's d, x5 ~ tr|`r unname(cohen.d(dat$X5,factor(dat$tr, levels = c(0, 1)))$estimate)`|`r unname(cohen.d(matcheddata1$X5,factor(matcheddata1$tr, levels = c(0, 1)))$estimate)`|`r unname(cohen.d(matcheddata2$X5,factor(matcheddata2$tr, levels = c(0, 1)))$estimate)`|`r unname(cohen.d(matcheddata3$X5,factor(matcheddata3$tr, levels = c(0, 1)))$estimate)`|`r unname(cohen.d(matcheddata4$X5,factor(matcheddata4$tr, levels = c(0, 1)))$estimate)`|`r unname(cohen.d(matcheddata5$X5,factor(matcheddata5$tr, levels = c(0, 1)))$estimate)`|`r unname(cohen.d(matcheddata6$X5,factor(matcheddata6$tr, levels = c(0, 1)))$estimate)`
cohen's d, x6 ~ tr|`r unname(cohen.d(dat$X6,factor(dat$tr, levels = c(0, 1)))$estimate)`|`r unname(cohen.d(matcheddata1$X6,factor(matcheddata1$tr, levels = c(0, 1)))$estimate)`|`r unname(cohen.d(matcheddata2$X6,factor(matcheddata2$tr, levels = c(0, 1)))$estimate)`|`r unname(cohen.d(matcheddata3$X6,factor(matcheddata3$tr, levels = c(0, 1)))$estimate)`|`r unname(cohen.d(matcheddata4$X6,factor(matcheddata4$tr, levels = c(0, 1)))$estimate)`|`r unname(cohen.d(matcheddata5$X6,factor(matcheddata5$tr, levels = c(0, 1)))$estimate)`|`r unname(cohen.d(matcheddata6$X6,factor(matcheddata6$tr, levels = c(0, 1)))$estimate)`
cohen's d, x7 ~ tr|`r unname(cohen.d(dat$X7,factor(dat$tr, levels = c(0, 1)))$estimate)`|`r unname(cohen.d(matcheddata1$X7,factor(matcheddata1$tr, levels = c(0, 1)))$estimate)`|`r unname(cohen.d(matcheddata2$X7,factor(matcheddata2$tr, levels = c(0, 1)))$estimate)`|`r unname(cohen.d(matcheddata3$X7,factor(matcheddata3$tr, levels = c(0, 1)))$estimate)`|`r unname(cohen.d(matcheddata4$X7,factor(matcheddata4$tr, levels = c(0, 1)))$estimate)`|`r unname(cohen.d(matcheddata5$X7,factor(matcheddata5$tr, levels = c(0, 1)))$estimate)`|`r unname(cohen.d(matcheddata6$X7,factor(matcheddata6$tr, levels = c(0, 1)))$estimate)`
cohen's d, x8 ~ tr|`r unname(cohen.d(dat$X8,factor(dat$tr, levels = c(0, 1)))$estimate)`|`r unname(cohen.d(matcheddata1$X8,factor(matcheddata1$tr, levels = c(0, 1)))$estimate)`|`r unname(cohen.d(matcheddata2$X8,factor(matcheddata2$tr, levels = c(0, 1)))$estimate)`|`r unname(cohen.d(matcheddata3$X8,factor(matcheddata3$tr, levels = c(0, 1)))$estimate)`|`r unname(cohen.d(matcheddata4$X8,factor(matcheddata4$tr, levels = c(0, 1)))$estimate)`|`r unname(cohen.d(matcheddata5$X8,factor(matcheddata5$tr, levels = c(0, 1)))$estimate)`|`r unname(cohen.d(matcheddata6$X8,factor(matcheddata6$tr, levels = c(0, 1)))$estimate)`
cohen's d, x9 ~ tr|`r unname(cohen.d(dat$X9,factor(dat$tr, levels = c(0, 1)))$estimate)`|`r unname(cohen.d(matcheddata1$X9,factor(matcheddata1$tr, levels = c(0, 1)))$estimate)`|`r unname(cohen.d(matcheddata2$X9,factor(matcheddata2$tr, levels = c(0, 1)))$estimate)`|`r unname(cohen.d(matcheddata3$X9,factor(matcheddata3$tr, levels = c(0, 1)))$estimate)`|`r unname(cohen.d(matcheddata4$X9,factor(matcheddata4$tr, levels = c(0, 1)))$estimate)`|`r unname(cohen.d(matcheddata5$X9,factor(matcheddata5$tr, levels = c(0, 1)))$estimate)`|`r unname(cohen.d(matcheddata6$X9,factor(matcheddata6$tr, levels = c(0, 1)))$estimate)`
y ~ tr, tr coef|`r unname(lm1.1.1$coefficients[which(labels(lm1.1.1$coefficients)== "tr")])`|`r unname(lm1.2.1$coefficients[which(labels(lm1.2.1$coefficients)== "tr")])`|`r unname(lm2.2.1$coefficients[which(labels(lm2.2.1$coefficients)== "tr")])`|`r unname(lm3.2.1$coefficients[which(labels(lm3.2.1$coefficients)== "tr")])`|`r unname(lm4.2.1$coefficients[which(labels(lm4.2.1$coefficients)== "tr")])`|`r unname(lm5.2.1$coefficients[which(labels(lm5.2.1$coefficients)== "tr")])`|`r unname(lm6.2.1$coefficients[which(labels(lm6.2.1$coefficients)== "tr")])`
y ~ tr + covariates, tr coef|`r unname(lm1.1.2$coefficients[which(labels(lm1.1.2$coefficients)== "tr")])` | `r unname(lm1.2.2$coefficients[which(labels(lm1.2.2$coefficients)== "tr")])`| `r unname(lm2.2.2$coefficients[which(labels(lm2.2.2$coefficients)== "tr")])`|`r unname(lm3.2.2$coefficients[which(labels(lm3.2.2$coefficients)== "tr")])`|`r unname(lm4.2.2$coefficients[which(labels(lm4.2.2$coefficients)== "tr")])`|`r unname(lm5.2.2$coefficients[which(labels(lm5.2.2$coefficients)== "tr")])`|`r unname(lm6.2.2$coefficients[which(labels(lm6.2.2$coefficients)== "tr")])`)
`r unname(lm1.1.2$coefficients[which(labels(lm1.1.2$coefficients)== "tr")])`
`r unname(lm1.1.2$coefficients[which(labels(lm1.1.2$coefficients)== "tr")])`
